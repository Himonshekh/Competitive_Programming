#include <bits/stdc++.h>
using namespace std;
#define Mx 300001
int A[Mx],Mp_a[1000001],n,d,q,u,v;
struct node{
    int cnt;
    node *left,*right;
    node(int cnt_,node *left_,node *right_){
        cnt=cnt_;left=left_;right=right_;
    }
    node *insert(int lf,int rt,int idx){
        if(lf<=idx && idx<=rt){
            if(lf==rt){
                return new node(this->cnt+1,NULL,NULL);
            }
            int m=(lf+rt)/2;
            return new node(this->cnt+1,this->left->insert(lf,m,idx) ,this->right->insert(m+1,rt,idx));
        }
        return this;
    }
};
node *root[Mx];
int query(node *curr,int s,int e,int lf,int rt){
    if(s>rt||e<lf)return 0;
    if(s>=lf&&e<=rt){
        return curr->cnt;
    }
    int m=(s+e)/2;
    return query(curr->left,s,m,lf,rt)+query(curr->right,m+1,e,lf,rt);
}
int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%d",&d);
        A[i]=Mp_a[d];
        Mp_a[d]=i;
        // cout<<A[i]<<" ";
    }
    // printf("\n");
    root[0]=new node(0,NULL,NULL);
    root[0]->left=root[0]->right=root[0];
    for(int i=1;i<=n;i++){
        root[i]=root[i-1]->insert(0,n,A[i]);
    }
    scanf("%d",&q);
    while(q--){
        scanf("%d%d",&u,&v);
        printf("%d\n",query(root[v],0,n,0,u-1)-(u-1));
    }
    return 0;
}
/// empty() lld I64d push_back() top() pop() insert() upper_bound() lower_bound() memset() max() min() scanf continue
